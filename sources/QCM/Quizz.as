package QCM{	// Les divers import utile à la classe	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.media.*;	import fl.controls.Button;	import fl.controls.Label;	import fl.controls.RadioButton;	import fl.controls.RadioButtonGroup;	import flash.text.*;	import flash.xml.XMLNode;	import Texte;	public class Quizz extends MovieClip {		//Divers variables		var mc_parent:MovieClip;		var nb_Questions:Number=10;		var nb_Question_enCours:Number;		var nb:Number;		var B_Val:Boolean;		var numQuizz;		public var fini=false;		//Conteneur dans lequel les radio bouton seront placés		private var conteneur:MovieClip;		// Liste des question		private var arrayQuestion:Array;		// Liste des réponses possibles		private var arrayReponse:Array;		// Liste des bonnes réponses		private var arrayBonneRep:Array;		//Cette liste permet de stocké uniquement les numéro des question et servira à éviter les doublons		// lors des tirages aléatoires.		private var arrayQuestionsPosees:Array;		// Groupe de radio bouton		private var rbg:RadioButtonGroup;		var rb0:RadioButton;		var rb1:RadioButton;		var rb2:RadioButton;		var rb3:RadioButton;		var rb4:RadioButton;		// Clip de la réponse juste		private var repJuste:Right = new Right();		// Clip de la réponse fausse		private var repFaux:Wrong = new Wrong();		// Variable utile à la détection du résultat à une question		private var resultat:String;		// Score courrant		var score:int=0;		//Variable pour récupérer les données du XML		var chargement_XML:URLLoader;		var contenu:XML;		var adresse:URLRequest;		// Texte de la question et des scores		var question:Texte;		var reponse1:Texte;		var reponse2:Texte;		var reponse3:Texte;		var reponse4:Texte;		var autre:Texte;		var tScore:Texte;		// Le bouton suivant et le bouton vérifier		var bou_suiv:btn_suivant;		var bou_verif:btn_verif;				var eval:int; //evalué 1, sinon 0				// Variable partagée avec toute l'application (cookie)		var share:SharedObject=SharedObject.getLocal("monCookie","/");		public function Quizz(url:String, parent_m:MovieClip, val:int, num:int=0) {			mc_parent=parent_m;			eval=val;			numQuizz=num;			nb_Question_enCours=0;			B_Val=false;			nb=-1;			initTexteQuestion();			initTexteReponse();			initTexteAutre();			Init_Btn_suivant();			initBtnRadio();			Init_Btn_valider();			initScore();			initXML(url);		}		function initXML(url:String) {			chargement_XML= new URLLoader();			adresse=new URLRequest(url);			chargement_XML.addEventListener(ProgressEvent.PROGRESS, avancement);			chargement_XML.addEventListener(Event.COMPLETE, loadXML);			chargement_XML.addEventListener(IOErrorEvent.IO_ERROR, indiquerErreur);			chargement_XML.load(adresse);		}		function avancement( event:Event) {			autre.text="Veuillez patienter....";			trace(event.target.bytesLoaded+" chargés sur "+event.target.bytesTotal);		}		function loadXML(e:Event):void {			contenu=new XML(e.target.data);			arrayQuestion = new Array();			arrayReponse = new Array();			arrayBonneRep = new Array();			arrayQuestionsPosees = new Array();			var i:Number=0;			for each (var q:XML in contenu..question) {				//on récupère les valeurs contenue dans le XML				arrayQuestion[i]=q.@texte;				arrayReponse[i]=new Array();				for (var j = 0; j<contenu.question[i].children().length(); j++) {// balise reponse					arrayReponse[arrayReponse.length-1].push(contenu.question[i].reponse[j]);					// Si la reponse est la bonne, on la place dans la liste des bonnes réponses					if (contenu.question[i].reponse[j].attribute("bonne")=="vrai") {						arrayBonneRep.push(j);// insertion de l'indice de la bonne réponse					}				}				this.arrayQuestionsPosees[i]=i;				i++;			}			//on affiche une question 			setQuestions();		}		//Pour trouver une autre question		function setQuestions() {			//on choisi un numéro de question et on incrémente le nombre de question posé			nb=Choix_Num_Question();			nb_Question_enCours++;			B_Val=false;			rb0.selected=true;			autre.text=" ";			//on met a jour le texte 			question.Modifier_Texte(arrayQuestion[nb]);			reponse1.Modifier_Texte(arrayReponse[nb][0]);			reponse2.Modifier_Texte(arrayReponse[nb][1]);			reponse3.Modifier_Texte(arrayReponse[nb][2]);			reponse4.Modifier_Texte(arrayReponse[nb][3]);			tScore.text=score+" / "+nb_Question_enCours;		}		//Pour pouvoir tirer une question aléatoirement		function Choix_Num_Question():Number {			var numero:Number;			//on choisi un numéro de question compris entre 0 et 4 ( pour toutes les questions qui sont dans le XML ) 			numero = Math.floor(Math.random()*( nb_Questions ));			//on recherche un numéro si cette question a déjà été choisi et si on n'a pas encore posé toutes les questions			while ( arrayQuestionsPosees[numero]==-1 && nb_Question_enCours<nb_Questions ) {				numero = Math.floor(Math.random()*( nb_Questions ));			}			//on met a -1 cette question pour ne pas la rechoisir 			this.arrayQuestionsPosees[numero]=-1;			return numero;		}		//Initialise la partie texte pour la question		function initTexteQuestion() {			//question=new Texte(80,30,600,100,30,0x009999,"Calibri");			question=new Texte(220,180,600,100,30,0x009999,"Calibri");			mc_parent.addChild(question);		}		//Initialise la partie texte pour les trois réponses 		function initTexteReponse() {			reponse1=new Texte(280,250,600,100,25,0x663366,"Calibri");			mc_parent.addChild(reponse1);			reponse2=new Texte(280,300,600,100,25,0x663366,"Calibri");			mc_parent.addChild(reponse2);			reponse3=new Texte(280,350,600,100,25,0x663366,"Calibri");			mc_parent.addChild(reponse3);			reponse4=new Texte(280,400,600,100,25,0x663366,"Calibri");			mc_parent.addChild(reponse4);		}		function initTexteAutre() {			autre=new Texte(220,600,600,100,30,0x91283B,"Calibri");			mc_parent.addChild(autre);		}		function initBtnRadio() {			rbg=new RadioButtonGroup("rbg_reponse");			rb0 = new RadioButton();			rb1 = new RadioButton();			rb2 = new RadioButton();			rb3 = new RadioButton();			rb4 = new RadioButton();			rb0.group=rbg;			rb1.group=rbg;			rb2.group=rbg;			rb3.group=rbg;			rb4.group=rbg;			rb0.move(-10,-10);			rb1.move(250,260);			rb2.move(250,310);			rb3.move(250,360);			rb4.move(250,410);			rb0.visible=false;			rb1.label=" ";			rb2.label=" ";			rb3.label=" ";			rb4.label=" ";			mc_parent.addChild(rb0);			mc_parent.addChild(rb1);			mc_parent.addChild(rb2);			mc_parent.addChild(rb3);			mc_parent.addChild(rb4);			rb0.addEventListener(MouseEvent.CLICK, announceGroup);			rb1.addEventListener(MouseEvent.CLICK, announceGroup);			rb2.addEventListener(MouseEvent.CLICK, announceGroup);			rb3.addEventListener(MouseEvent.CLICK, announceGroup);			rb4.addEventListener(MouseEvent.CLICK, announceGroup);		}		function announceGroup(e:MouseEvent) {			if (B_Val==false) {				bou_verif.visible=true;			}			if (rb0.selected==false) {				B_Val=true;				autre.text=" ";			}		}		//initialise le bouton suivant		function Init_Btn_suivant() {			bou_suiv = new btn_suivant();			mc_parent.addChild(bou_suiv);			bou_suiv.x=450;			bou_suiv.y=500;			bou_suiv.addEventListener( MouseEvent.CLICK, clicBoutonSuivant );		}		//action qui se produit lorsque le bouton suivant est cliqué		function clicBoutonSuivant(pEvt:MouseEvent) {			if (repFaux.stage) {				mc_parent.removeChild(repFaux);			}			if (repJuste.stage) {				mc_parent.removeChild(repJuste);			}//si on a encore des question a poser, on choisit une question et on met a jour les boutons			if (nb_Question_enCours<nb_Questions&&B_Val==true&&rb0.selected==false&&bou_verif.visible==false) {				setQuestions();				bou_verif.visible=true;			} else {				//si on n'a plus de question et que le bouton vérifier n'est plus visible ( cad que l'on a choisi une réponse ) on finit le jeu				// et on cache le bouton suivant				if (nb_Question_enCours>=nb_Questions&&bou_verif.visible==false) {					Terminer();					bou_suiv.visible=false;				} else {					//sinon, cela veut dire que l'on n'a pas vérifié la réponse					if (bou_verif.visible==true&&rb0.selected==false) {						autre.text=" Veuillez valider votre réponse";						autre.Format_Texte(25, "Calibri");					} else {//cas ou le bouton radio 0 ( initialisiation ) et toujours séléctionné, le joueur n'a pas choisi de réponse						autre.text=" Veuillez cocher une réponse";						autre.Format_Texte(25, "Calibri");					}					autre.Position_Texte(600, 500);				}			}		}		//initialise le bouton Valider		function Init_Btn_valider() {			bou_verif = new btn_verif();			mc_parent.addChild(bou_verif);			bou_verif.x=330;			bou_verif.y=500;			bou_verif.addEventListener( MouseEvent.CLICK, clicBoutonValider );		}		//évènements qui se produisent lorsque le bouton Valider est cliqué		function clicBoutonValider(pEvt:MouseEvent) {			//Si un des boutons radios des réponse est séléctionné 			if (rb1.selected==true||rb2.selected==true||rb3.selected==true||rb4.selected==true) {				//on vérifie la réponse				VerifRep();				bou_verif.visible=false;			}			//Si aucun n'est séléctionné 			if (rb1.selected==false&&rb2.selected==false&&rb3.selected==false&&rb4.selected==false) {				autre.text=" Veuillez cocher une réponse ";				autre.Position_Texte(300, 550);				autre.Format_Texte(25, "Calibri");			}		}		//Vérifie si la réponse est correct		function VerifRep() {			trace(arrayBonneRep[nb]);			if ( (rb1.selected == true  && arrayBonneRep[nb]==0) || (rb2.selected == true  && arrayBonneRep[nb]==1) || (rb3.selected == true  && arrayBonneRep[nb]==2) || (rb4.selected == true  && arrayBonneRep[nb]==3)) {				autre.text=" Bonne réponse ! ";				score++;				autre.Position_Texte(300, 550);				autre.Format_Texte(30, "Calibri");			} else {				var nb2:Number=nb+1;				nb2=arrayBonneRep[nb];				nb2+=1;				autre.text=" Mauvaise réponse ... \n La bonne réponse était la "+nb2;				autre.Position_Texte(300, 550);				autre.Format_Texte(25, "Calibri");				//affichage clip Faux				repFaux.x=rbg.selection.x-20;				repFaux.y=rbg.selection.y;				mc_parent.addChild(repFaux);			}			if (arrayBonneRep[nb]==0) {				repJuste.x=rb1.x-20;				repJuste.y=rb1.y;			} else if (arrayBonneRep[nb]==1) {				repJuste.x=rb2.x-20;				repJuste.y=rb2.y;			} else if (arrayBonneRep[nb]==2) {				repJuste.x=rb3.x-20;				repJuste.y=rb3.y;			} else if (arrayBonneRep[nb]==3) {				repJuste.x=rb4.x-20;				repJuste.y=rb4.y;			}			mc_parent.addChild(repJuste);			tScore.text=score+" / "+nb_Question_enCours;		}		function Terminer() {			fini=true;			rb1.visible=false;			rb2.visible=false;			rb3.visible=false;			rb4.visible=false;			reponse4.visible=false;			tScore.visible=false;			var phrase:String;			var phrase1:String;			if (score==nb_Questions) {				phrase=" Félicitation !!";				phrase1="Vous avez répondu correctement à toutes les questions !";			} else {				if (score<=nb_Questions/2) {					phrase="Mauvais résultat ...";					phrase1=" Vous devez revoir les cours et vous entraîner davantage !";				} else {					phrase=" Résultat moyen ";					phrase1=" Vous pouvez revoir encore un peu le cours \n pour être encore meilleur !";				}			}			reponse2.Position_Texte(170, 315);			reponse3.Position_Texte(170, 375);			reponse3.Format_Texte(20, "Calibri");			question.text=" QCM Terminé ! ";			reponse1.text=" Votre score : "+score+" / "+nb_Questions;			reponse2.text=phrase;			reponse3.text=phrase1;			autre.text=" ";			if (eval) {				if (numQuizz==1) {					share.data.score2=score;				} else if (numQuizz==2) {					share.data.score3=score;				}			}		}		function initScore() {			tScore=new Texte(700,550,200,600,40,0xFF0000,"Calibri");			mc_parent.addChild(tScore);		}		// fonction indiquant si une erreur de chargmement survient :		function indiquerErreur( event:Event ) {			trace(event);		}	}}