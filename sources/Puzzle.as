/* Projet IN42 : Introduction au multimédia. Réalisé par Guillemot Yannick et Grosperrin QuentinPrintemps 2011 */package {	import flash.display.*;	import flash.events.*;	import flash.net.*;	import flash.media.*;	// Importation des tween	import fl.transitions.Tween;	import fl.transitions.easing.*;	import Texte;	public class Puzzle extends MovieClip {		private var mc_parent:MovieClip;		private var nb_planetes:Number=8;		private var xInit:Number;		private var yInit:Number;		private var nomPlanete:Texte;		var tScore:Texte;		private var planetesLoader:Array = new Array();		private var planetes:Array = new Array();		private var cible:cible_planete;				//tableau d'indices de planètes placées aléatoirement à l'initialisation		private var indicesPlacees:Array =  new Array();		//Nombres de tentatives		public var nbTentatives:int=0;		// Score courrant		private var score:int=0;		//si évalué 1 sinon 0		var eval:int;		private var xml:XML;		// variable partagé avec toute l'application (cookie)		var share:SharedObject=SharedObject.getLocal("monCookie","/");				public function Puzzle(val:int, parent_m:MovieClip) {			mc_parent=parent_m;			eval=val;			if(eval)				share.data.score1=score;			// Chargement du fichier xml 			var chargeur:URLLoader = new URLLoader();			var adresse:URLRequest=new URLRequest("../xml/solar_system.xml");			chargeur.addEventListener(Event.COMPLETE, XMLLoaded);			chargeur.addEventListener(IOErrorEvent.IO_ERROR, errorDisplay);			chargeur.load(adresse);		}		public function XMLLoaded( event:Event ) {			xml=new XML(event.target.data);			var j:int; //indice random			for (var i=0; i<xml.children().length(); i++) {				//boucle de création de placement des planètes, de leur cible, de leurs écouteurs 				//on crée le Loader				planetesLoader[i]=new Loader();				//on crée le MovieClip qui va contenir le Loader				planetes[i]=new MovieClip();				planetesLoader[i].load(new URLRequest(xml.planet[i].attribute("swf")));				//Repositionne les centres de chaque planètes				planetesLoader[i].x=-150;				planetesLoader[i].y=-150;				planetes[i].name=xml.planet[i].attribute("nom");				//planetes[i].contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,loading);				for (j = 0; j<xml.children().length(); j++) {					if (planetes[i].name==xml.planet[j].attribute("nom")) {						planetes[i].scalePlanete=xml.planet[j].attribute("scale");					}				}				planetesLoader[i].contentLoaderInfo.addEventListener(Event.UNLOAD,swfDecharge);				//on met le Loader dans le MovieClip				planetes[i].addChild(planetesLoader[i]);				//on ajuste la taille				planetes[i].scaleX=0.2*planetes[i].scalePlanete;				planetes[i].scaleY=0.2*planetes[i].scalePlanete;				j=Math.random()*8;				trace(j);				while(indicesPlacees.indexOf(j) != -1)					//tant que l'indice est dans la liste on le regénère...					j=Math.random()*8;				indicesPlacees.push(j);				planetes[i].x=100+j*120+planetes[i].scalePlanete*j;				planetes[i].y=125;				planetes[i].isDraged=false;				planetes[i].addEventListener(MouseEvent.MOUSE_OVER,survolPlanete);				planetes[i].addEventListener(MouseEvent.MOUSE_OUT,sortiePlanete);				planetes[i].addEventListener(MouseEvent.MOUSE_DOWN, drag);				planetes[i].addEventListener(MouseEvent.MOUSE_UP, drop);				//ajout de la cible correspondant à la planète				cible=new cible_planete();				cible.name=planetes[i].name+"Cible";				cible.x=200+i*105;				cible.y=477;				addChild(cible);				addChild(planetes[i]);			}			//nom de la planète affiché au survol			nomPlanete=new Texte(-100,-100,100,100,20,0xCCCCCC,"Calibri");			initScore();		}		function swfDecharge(event:Event):void {			event.target.loaderInfo.removeEventListener(Event.UNLOAD, swfDecharge);		}		function survolPlanete(event:Event):void {			new Tween(event.currentTarget,"alpha",Regular.easeInOut,event.currentTarget.alpha,0.5,1,true);			nomPlanete.Modifier_Texte(event.currentTarget.name);			//on place le nom de la planète en dessous d'elle			nomPlanete.Position_Texte(event.currentTarget.x,event.currentTarget.y+30*event.currentTarget.scalePlanete);			addChild(nomPlanete);		}		function sortiePlanete(event:Event):void {			new Tween(event.currentTarget,"alpha",Regular.easeInOut,event.currentTarget.alpha,1,1,true);			if(nomPlanete.stage)			//à tester pour éviter erreur quand le jeu se termine et que tous les DisplayObjects sont enlevés				removeChild(nomPlanete);		}		function drag(event:MouseEvent):void {			xInit=event.currentTarget.x;			yInit=event.currentTarget.y;			event.currentTarget.isDraged=false;			if (event.currentTarget.x!=getChildByName(event.currentTarget.name+"Cible").x&&event.currentTarget.y!=getChildByName(event.currentTarget.name+"Cible").y) {				event.currentTarget.isDraged=true;				event.currentTarget.startDrag(true);//La planète suit le pointeur de souris				nomPlanete.x=mouseX;				nomPlanete.y=mouseY;				event.currentTarget.parent.addChild(event.currentTarget);			}		}		function drop(event:MouseEvent):void {			//On test si la pièce se trouve proche de sa cible			if (event.currentTarget.x < getChildByName(event.currentTarget.name+"Cible").x + 20 && 			  event.currentTarget.x > getChildByName(event.currentTarget.name+"Cible").x - 20 && 			  event.currentTarget.y < getChildByName(event.currentTarget.name+"Cible").y + 20 && 			  event.currentTarget.y > getChildByName(event.currentTarget.name+"Cible").y - 20 && event.currentTarget.isDraged) {				//vérifie si la pièce déplacée est bien sur la pièce cible				event.currentTarget.x=getChildByName(event.currentTarget.name+"Cible").x;				event.currentTarget.y=getChildByName(event.currentTarget.name+"Cible").y;				event.currentTarget.alpha=1;				score++;			} else if (event.currentTarget.isDraged) {				//si elle n'est pas dans la bonne position, elle reprend sa position d'origine				new Tween(event.currentTarget,"x",Elastic.easeOut,event.currentTarget.x,xInit,.5,true);				new Tween(event.currentTarget,"y",Elastic.easeOut,event.currentTarget.y,yInit,.5,true);			}			tScore.Modifier_Texte(score + "/8");			//on a essayé une fois			nbTentatives++;			//la planète n'est plus bougée			event.currentTarget.isDraged=false;			//et arrête de glisser			event.currentTarget.stopDrag();			// Si on a fini, on vide la fenetre et on affiche un message			if (nbTentatives==8) {				Terminer();			}		}		function initScore() {			tScore=new Texte(800,600,200,600,40,0xCCCCCC,"Calibri");			tScore.Modifier_Texte(score+"/8");			addChild(tScore);		}		public function Terminer() {			if (eval) {				share.data.score1=score;			}			removeChildrenOf(this);			new Tween(mc_parent["ligne"],"alpha",Regular.easeInOut,mc_parent["ligne"].alpha,0,.1,true);			new Tween(mc_parent["soleil"],"x",Regular.easeInOut,mc_parent["soleil"].x,mc_parent.width/2,1,true);			var texteFin:Texte=new Texte(200,250,600,200,30,0xFFCC00,"Calibri");			texteFin.Modifier_HtmlTexte("Félicitation, vous avez terminé le puzzle !<br/> Votre score est de " + score + "/8");			texteFin.alpha=0;			addChild(texteFin);			new Tween(texteFin,"alpha",Regular.easeInOut,texteFin.alpha,1,1,true);		}		function removeChildrenOf(mc:MovieClip):void {			if (mc.numChildren!=0) {				var k:int=mc.numChildren;				while ( k -- ) {					mc.removeChildAt( k );				}			}		}		//Fonction de retour sur erreur		function errorDisplay( event:Event ) {			trace(event);		}		public function getScore() {			return score;		}	}}